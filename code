#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <cstdlib>
#include "account.h"
using namespace std;

struct record{
  string date;
  string amount;
  string type;
  string account;
  record * next;
};

//get data from the user's file and store it in a linked list
//return password

string getdata(string name,record *& rec){
  record * tail;
  string password,str;
  ifstream fin;
  fin.open(name.c_str());
  fin>>password;
  int counter=0;
  while (getline(fin,str)){
    istringstream iss(str);
    record * p = new record;
    iss>>p->date>>p->amount>>p->type>>p->account;
    p->next=NULL;
    if (rec==NULL){
      rec=p;
      tail=p;
      }
    else{
      tail->next=p;
      tail=p;
      }
    }
  return password;
  }

void login(string * name, string * password,record * rec){
  int number;
  cout<<"Enter 1 to login\nEnter 2 to create new account\n;
  cin>>number;
  while (number!=1 && number!=2){
    cout<<"Invalid input! Please enter again!"<<endl;
    cin>>number;
    }
  if (number==1){
    cout<<"Please enter your user name!";
    cin>>name;
    check_password=getdata(name,rec);                                  //file input
    cout<<"Please enter your password!";
    cin>>password;
    while (check_password!=password){
      cout<<"Wrong password! Please enter your password again!"<<endl;
      cin>>password;
      }
    }
  if (number==2){
    cout<<"Please enter your user name!";
    cin>>name;                                                //open new file here???
    cout<<"Please enter your password!";
    cin>>password;
    }
  }

void printmenu(){

record * findpos(string date,record * rec){
  record * current = rec;
  int intdate = atoi(date.c_str())
  while (current != NULL){
  if (intdate>atoi((current->date).c_str())){
    if (current->next==NULL){
      return current;
    }
    else{
      current=current->next;
      }
    }
  else{
    return current;
    }
  }
  return current
}

void insert(record * after,string input){
  record * tem = new record;
  istringstream iss(str);
  iss>>tem->date>>tem->amount>>tem->type>>tem->account;
  tem->next=after->next;
  after->next=tem;
}

void add(record * rec){
  string input;
  cout<<"Please enter date, amount, type of expense and account according to the format below"<<endl;
  cout<<"YYYYMMDD AMOUNT TYPE ACCOUNT"<<endl;
  record * after = findpos(input.substr(0,8),rec);
  insert(after, input);
  
void (string keyitem, string key, record * rec,record *ptr[]){
  int count=0;
  if (rec->keyitem==key){
    cout<<count<<": "<<rec->date<<" "<<rec->amount<<" "<<rec->type<<" "<<rec->account<<endl;
    ptr[count]=-1;                                                                               //delete head
    count++;
  }
  record * current=rec;
  while (current->next!=NULL){
    if (current->next->keyitem==key){
      cout<<count<<": "<<current->next->date<<" "<<current->next->amount<<" "<<current->next->type<<" "<<current->next->account<<endl;
      ptr[count]=current;
      count++;
      }
    current=current->next;
  }
  if (current!=rec){
  current=current->next;
  if (current->keyitem==key){
     cout<<count<<": "<<current->date<<" "<<current->amount<<" "<<current->type<<" "<<current->account;
     ptr[count]=-2                                                                              //delete tail
    }
  }
}

void delete_rec(record * after,record *&rec){
  if (after==-1){
    record * tem=rec;
    rec=rec->next;
    delete tem;
  }
  if (after==-2){
    while (current->next!=NULL){
      current=current->next;
    }
    delete current;
  }
  if (after!=-1 && after !=-2){
    record * tem = after->next;
    after->next=tem->next;
    delete tem;
  }
}

void delete(record * rec){
  string keyitem, key;
  cout<<"Please enter a key item for searching"<<endl<<"1: Date\n2: Amount\n3: Type\n4: Account";
  cin>>keyitem;
  cout<<"input sth";
  cin>>key;
  record *ptr[300];                              //use dynamic memory if possible
  print_ptr(keyitem,key,rec,ptr);
  cout<<"number you want to delete"<<endl;
  int number;
  cin>>number;
  delete_rec(ptr[number],rec);
  
  
int main(){
  record * rec = NULL;                                //dynamic memory management
  string name=" ",password=" ";
  login(name,password,rec);
  
  printmenu();
  int choice;
  
  cin>>choice;
  while (choice!="END"){
  cin>>choice;
  switch (choice){
  case 1:
    add(rec);
    break;
  case 2:
    delete(rec);
    break;
  case 3:
    edit();                                     //combine add(rec) and delete(rec)
    break;
  case 4:
    view();
    break;
  case 5:
    report();
    break;
  case 6:
    budget();
    break;
  case 7:
    forecast();
    break;
  default:
    cout<<"invalid input! Please input again!"<<endl;
    }
  }
  savedata();                           //file output
  delete();                             //avoid memory leakage
  return 0;
  }
