#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <cstdlib>
#include <iomanip>
#include <ctime>
using namespace std;

struct record{
  string date;
  string amount;
  string type;
  string account;
  record * next;
};

//return current date in the form of YYYYMMDD
string gettime(){
	time_t now = time(0);
	tm *datetm = localtime(&now);
	string date = to_string(1900+datetm->tm_year);
	if ((1+datetm->tm_mon)<10){
		date = date + "0";
		}
	date = date + to_string(1+datetm->tm_mon);
	if (datetm->tm_mday<10){
		date = date + "0";
		}
	date = date + to_string(datetm->tm_mday);
	return date;
}

//get data from the user's file and store it in a linked list
//return password

string getdata(string name,record *& rec){
  record * tail;
  string password,str;
  ifstream fin;
  name = name + ".txt";
  fin.open(name.c_str());
  getline(fin,password);
  int counter=0;
  while (getline(fin,str)){
    istringstream iss(str);
    record * p = new record;
    record * tail;
    iss>>p->date>>p->amount>>p->type>>p->account;
    p->next=NULL;
    if (rec==NULL){
      rec=p;
      tail=p;
      }
    else{
      tail->next=p;
      tail=p;
      }
    }
  return password;
  }

void login(string & name, string & password,record *& rec){
  int number;
  cout<<"Enter 1 to login\nEnter 2 to create new account\n";
  cin>>number;
  while (number!=1 && number!=2){
    cout<<"Invalid input! Please enter again!"<<endl;
    cin>>number;
    }
  if (number==1){
    cout<<"Please enter your user name!"<<endl;
    cin>>name;
    string check_password;
    check_password=getdata(name,rec);                                  //file input
    cout<<"Please enter your password!"<<endl;
    cin>>password;
    while (check_password!=password){
      cout<<"Wrong password! Please enter your password again!"<<endl;
      cin>>password;
      }
    }
  if (number==2){
    cout<<"Please enter your user name!"<<endl;
    cin>>name;                                                //open new file here???
    cout<<"Please enter your password!"<<endl;
    cin>>password;
    }
  }

void printmenu(){

record * findpos(string date,record * rec){
  record * current = rec;
  int intdate = atoi(date.c_str());
  while (current != NULL){
  if (current->next==NULL){
    return current;
  }
  if (intdate>atoi((current->next->date).c_str())){
    current=current->next;
    }
  else{
    return current;
    }
  }
  return rec;
}

void insert(record * after,string input){
  record * tem = new record;
  istringstream iss(input);
  iss>>tem->date>>tem->amount>>tem->type>>tem->account;
  tem->next=after->next;
  after->next=tem;
}

void add(record * rec){
  cout<<"Please enter date, amount, type of expense and account according to the format below"<<endl;
  cout<<"YYYYMMDD AMOUNT TYPE ACCOUNT"<<endl;
  string input;
  cin.ignore();
  getline(cin,input);
  record * after = findpos(input.substr(0,8),rec);
  insert(after, input);
}
  
int print_ptr(string key, record * rec,record *ptr[],record * head,record * tail){
  int count=0;
  if (rec->date==key || rec->amount==key || rec->type==key || rec->account==key){
    cout<<count<<": "<<rec->date<<" "<<rec->amount<<" "<<rec->type<<" "<<rec->account<<endl;
    ptr[count]=head;                                                                               //delete head
    count++;
  }
  record * current=rec;
  while (current->next->next!=NULL){
    if (current->next->date==key || current->next->amount==key || current->next->type==key || current->next->account==key){
      cout<<count<<": "<<current->next->date<<" "<<current->next->amount<<" "<<current->next->type<<" "<<current->next->account<<endl;
      ptr[count]=current;
      count++;
      }
    current=current->next;
  }
  if (current!=rec){
  current=current->next;
  if (current->date==key || current->amount==key || current->type==key || current->account==key){
     cout<<count<<": "<<current->date<<" "<<current->amount<<" "<<current->type<<" "<<current->account<<endl;
     ptr[count]=tail;
     count++;                                                                              //delete tail
    }
  }
  return count;
}

void delete_rec(record * after,record *&rec,record * head,record * tail){
  if (after==head){
    record * tem=rec;
    rec=rec->next;
    delete tem;
  }
  if (after==tail){
    record * current=rec;
    while (current->next->next!=NULL){
      current=current->next;
    }
    record * tem=current->next;
    current->next=NULL;
    delete tem;
  }
  if (after!=head && after !=tail){
    record * tem = after->next;
    after->next=tem->next;
    delete tem;
  }
}

void delete_(record *& rec){
  record tem1,tem2;
  record * head=&tem1;
  record * tail=&tem2;
  string keyword;
  cout<<"Please enter a key word for searching"<<endl;
  cin>>keyword;
  record *ptr[300];                              //use dynamic memory if possible
  if (print_ptr(keyword,rec,ptr,head,tail)!=0){
    cout<<"number you want to delete"<<endl;
    int number;
    cin>>number;
    delete_rec(ptr[number],rec,head,tail);
  }
  else cout<<"Not found!"<<endl;
}

//print record within one month instead of all record???
void view(record * rec){
	cout<<left<<setw(10)<<"Date"<<setw(10)<<"Amount"<<setw(10)<<"Type"<<setw(10)<<"Account"<<endl;
	record * current = rec;
	while (current!=NULL){
		cout<<setw(10)<<current->date<<setw(10)<<current->amount<<setw(10)<<current->type<<setw(10)<<current->account<<endl;
		current=current->next;
	}
}
  
int main(){
  record * rec = NULL;                                //dynamic memory management
  string name=" ",password=" ";
  login(name,password,rec);
  
  printmenu();
  char choice;
  while (choice!='N'){
  cout<<"input your choice"<<endl;
  cin>>choice;
  switch (choice){
  case '1':
    add(rec);
    break;
  case '2':
    delete_(rec);
    break;
  case '3':
    delete_(rec);
    add(rec);						//combine add(rec) and delete(rec)
    break;
  case '4':
    view(rec);
    break;
  case '5':
    report();
    break;
  case '6':
    budget();
    break;
  case '7':
    forecast();
    break;
  case 'N':
    cout<<"Bye!"<<endl;
    break
  default:
    cout<<"invalid input! Please input again!"<<endl;
    }
  }
  savedata();                           //file output
  deletedynamic();                       //avoid memory leakage
  return 0;
  }
